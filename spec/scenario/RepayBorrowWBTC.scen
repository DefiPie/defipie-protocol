-- Tests for repaying borrows

Macro NewBorrow borrowAmount borrowRate
    NewController price:1.0 -- TODO: This should really be a price for a specific asset
    NewPToken ZRX pZRX
    NewPToken WBTC pWBTC borrowRate 0.1 0 8 WBTC -- note: cannot use macros with named args right now
    Give pWBTC 10e8 WBTC -- Faucet some WBTC to borrow
    Support pZRX collateralFactor:0.5
    Support pWBTC collateralFactor:0.5
    Prep Geoff Some ZRX pZRX
    Mint Geoff 100e18 pZRX
    EnterMarkets Geoff pZRX pWBTC
    Borrow Geoff borrowAmount pWBTC

Test "Borrow WBTC, hold a few blocks, and repay part"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay one full token
    From Geoff (Erc20 WBTC Approve pWBTC 1.0e8)
    RepayBorrow Geoff 1e8 pWBTC
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1.5e8
    -- Let's check the overall numbers
    Assert Equal (Erc20 WBTC TokenBalance Geoff) Zero
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 10e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1.5e8
    FastForward 200000 Blocks -- 1.5e8 * (1 + 200000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 3e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 3e8

Test "Borrow, hold a few blocks, and repay full"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    Give Geoff 1.5e8 WBTC -- Geoff had the 1.0e8 borrowed WBTC
    From Geoff (Erc20 WBTC Approve pWBTC 2.5e8)
    RepayBorrow Geoff 2.5e8 pWBTC
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 0e8
    -- Let's check the overall numbers
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 0e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 11.5e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 0e8
    FastForward 200000 Blocks -- 0e8 * (1 + 200000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 0e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 0e8

Test "Borrow, hold a few blocks, and repay too much v1"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    Give Geoff 2.5e8 WBTC -- Geoff had the 1.0e8 borrowed WBTC
    From Geoff (Erc20 WBTC Approve pWBTC 3.5e8)
    RepayBorrow Geoff 3.5e8 pWBTC
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 0e8
    -- Let's check the overall numbers
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 11.5e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 0e8
    FastForward 200000 Blocks -- 0e8 * (1 + 200000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 0e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 0e8

Test "Borrow, hold a few blocks, and repay too much v2"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    Prep Geoff 10e8 WBTC pWBTC
    Expect Changes (Erc20 WBTC TokenBalance Geoff) -2.5e8
    Expect Changes (Erc20 WBTC TokenBalance pWBTC) 2.5e8
    RepayBorrow Geoff 10e8 pWBTC
    -- Let's check the overall numbers
    Assert Equal (PToken pWBTC BorrowBalance Geoff) Zero
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) Zero
    FastForward 200000 Blocks -- 0e18 * (1 + 200000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) Zero
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) Zero

Test "Borrow, and get a negative total cash situation"
    Invariant Success
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 9e8
    -- Let's zoom way forward into the future
    FastForward 9800000 Blocks -- 1e8 * (1 + 9800000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 50e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 50e8
    -- Now let's repay one full token
    From Geoff (Erc20 WBTC Approve pWBTC 1.0e8)
    RepayBorrow Geoff 1.0e8 pWBTC
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 49e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 49e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 0e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 10e8

Test "Borrow, hold a few blocks, and repay behalf part"
    Invariant Success
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay one full token from another user
    Prep Torrey 1.0e8 WBTC pWBTC
    RepayBorrowBehalf Torrey Geoff 1.0e8 pWBTC
    Assert Equal (PToken pWBTC BorrowBalance Torrey) Zero
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1.5e8
    -- Let's check the overall numbers
    Assert Equal (Erc20 WBTC TokenBalance Torrey) 0e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 10e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1.5e8
    FastForward 200000 Blocks -- 1.5e8 * (1 + 200000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Torrey) Zero
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 3e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 3e8

Test "Prohibit repay by controller rejection due to mock unlist"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 0.001e8 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 10e8 WBTC pWBTC
    Expect Changes (Erc20 WBTC TokenBalance Geoff) Zero
    Expect Changes (Erc20 WBTC TokenBalance pWBTC) Zero
    Controller UnList pZRX -- Mock unlist ZRX
    RepayBorrow Geoff 2.5e8 pZRX
    Assert Failure CONTROLLER_REJECTION REPAY_BORROW_CONTROLLER_REJECTION MARKET_NOT_LISTED
    -- Let's check the overall numbers
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 2.5e8

Test "Borrow WBTC, can't repay when paused"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    Assert Equal (Erc20 WBTC TokenBalance Geoff) 1e8
    Assert Equal (Erc20 WBTC TokenBalance pWBTC) 9e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e18 * (1 + 300000 * 0.000005)
    Invariant Remains (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay one full token
    From Geoff (Erc20 WBTC Approve pWBTC 1.0e8)
    Erc20 WBTC Pause
    AllowFailures
    RepayBorrow Geoff 1e8 pWBTC
    Assert Revert

Test "Repay fails with insufficient allowance"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 100e8 WBTC pWBTC allowanceAmount:1.5e8
    Expect Changes (Erc20 WBTC TokenBalance Geoff) Zero
    Expect Changes (Erc20 WBTC TokenBalance pWBTC) Zero
    RepayBorrow Geoff 2.5e8 pWBTC
    --wbtc does not revert with reason in transfer from
    Assert Revert "revert"
    -- Let's check the overall numbers
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 2.5e8

Test "Repay fails with insufficient balance"
    NewBorrow borrowAmount:1e8 borrowRate:0.000005
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 1e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 1e8
    -- Now let's add some blocks and see what happs
    FastForward 300000 Blocks -- 1e8 * (1 + 300000 * 0.000005)
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    -- Now let's repay fully
    AllowFailures
    Prep Geoff 0e8 WBTC pWBTC allowanceAmount:2.5e8
    Expect Changes (Erc20 WBTC TokenBalance Geoff) Zero
    Expect Changes (Erc20 WBTC TokenBalance pWBTC) Zero
    RepayBorrow Geoff 2.5e8 pWBTC
    --wbtc does not revert with reason in transfer from
    Assert Revert "revert"
    -- Let's check the overall numbers
    Assert Equal (PToken pWBTC BorrowBalance Geoff) 2.5e8
    Assert Equal (PToken pWBTC TotalBorrowsCurrent) 2.5e8
