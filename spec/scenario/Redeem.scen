-- Redeem Tests

Test "Mint then Redeem All"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    -- Check current affairs
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (PToken pZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 400e8 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 100e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 60e18

Test "Mint, Enter and then Redeem All"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    -- Check current affairs
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (PToken pZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff pZRX
    Redeem Geoff 400e8 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 100e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 60e18

Test "Mint then Redeem Part"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    -- Check current affairs
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (PToken pZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 250e8 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 250e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 45e18

Test "Mint then Redeem Too Much"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    -- Check and hold static
    Invariant Static (PToken pZRX ExchangeRateStored)
    Invariant Remains (Erc20 pZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    AllowFailures
    Redeem Geoff 501e8 pZRX
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint then Redeem Zero"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    -- Check current affairs
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (PToken pZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 0e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18

Test "Mint then redeem with interest - no reserves"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Invariant Remains (PToken pZRX Reserves) Zero
    Prep Geoff 50e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (PToken pZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX pZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (PToken pZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 409.090909e8 pZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 44.99999999e18
    Assert Equal (Erc20 ZRX TokenBalance pZRX) 10.00000001e18
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 90.909091e8
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 10.00000001e18
    Assert Equal (PToken pZRX ExchangeRate) 1.1e9

Test "Mint then redeem part with interest - no reserves"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Invariant Remains (PToken pZRX Reserves) Zero
    Prep Geoff 50e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (PToken pZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX pZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (PToken pZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 407.0909091e8 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 92.9090909e8
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 10.219999999e18
    Assert Equal (PToken pZRX ExchangeRate) 1.1e9
    Assert Equal (Erc20 ZRX TokenBalance pZRX) 10.219999999e18

Test "Mint then redeem with reserves and interest"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (PToken pZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX pZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 500e8
    Assert Equal (PToken pZRX Reserves) 1e18
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (PToken pZRX ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 407.4074074e8 pZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 43.9999999992e18
    Assert Equal (Erc20 ZRX TokenBalance pZRX) 11.0000000008e18
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 92.5925926e8
    Assert Equal (PToken pZRX Reserves) 1e18
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) 10.0000000008e18
    Assert Equal (PToken pZRX ExchangeRate) 1.08e9

Test "Two users Mint, one redeems"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff Some ZRX pZRX
    Prep Torrey Some ZRX pZRX
    Mint Geoff 20e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 200e8
    Assert Equal (Erc20 pZRX TotalSupply) 200e8
    Mint Torrey 20e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 200e8
    Assert Equal (Erc20 pZRX TokenBalance Torrey) 200e8
    Assert Equal (Erc20 pZRX TotalSupply) 400e8
    Redeem Torrey 100e8 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) 200e8
    Assert Equal (Erc20 pZRX TokenBalance Torrey) 100e8
    Assert Equal (Erc20 pZRX TotalSupply) 300e8

Test "Redeem transfer out fails"
    NewController
    ListedPToken EVL pEVL initialExchangeRate:1e9 tokenType:Evil
    Erc20 EVL SetFail False
    Prep Geoff 70e18 EVL pEVL
    Mint Geoff 50e18 pEVL
    -- Check current affairs
    Invariant Remains (Erc20 pEVL TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 EVL TokenBalance Geoff) 20e18
    Invariant Static (PToken pEVL ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Erc20 EVL SetFail True
    AllowFailures
    Redeem Geoff 500e8 pEVL
    Assert Revert "revert TOKEN_TRANSFER_OUT_FAILED"

Test "Mint, Enter, then Redeem Too Much (collateral factor: 0)"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    -- Check and hold static
    Invariant Static (PToken pZRX ExchangeRateStored)
    Invariant Remains (Erc20 pZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff pZRX
    AllowFailures
    Redeem Geoff 501e8 pZRX
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint, Enter, then Redeem Too Much (collateral factor: 0.1)"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Controller SetCollateralFactor pZRX 0.1
    Prep Geoff 70e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    -- Check and hold static
    Invariant Static (PToken pZRX ExchangeRateStored)
    Invariant Remains (Erc20 pZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff pZRX
    AllowFailures
    Redeem Geoff 501e8 pZRX
    Assert Failure CONTROLLER_REJECTION REDEEM_CONTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
