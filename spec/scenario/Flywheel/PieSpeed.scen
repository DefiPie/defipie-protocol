-- Tests for the grants and math patch

Macro FlywheelController price=10.0 borrowRate=0.000005 pieInitAmount=5000000e18
    NewRegistryProxy
    Unitroller Deploy RegistryProxy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy (PriceOracle Address) (RegistryProxy Address) (RegistryProxy Address)
    PriceOracleProxy SetPrice (PriceOracle Address) price -- fixed oracle, set price for all assets
    ----g2
    ControllerImpl Deploy ScenarioG2 ControllerScenG2
    Unitroller SetPendingImpl ControllerScenG2
    ControllerImpl ControllerScenG2 Become
    --list some tokens
    RegistryProxy SetPriceOracle (PriceOracleProxy Address)
    Controller SetMaxAssets 20
    Controller SetCloseFactor 0.5
    Controller LiquidationIncentive 1.1
    NewPToken ZRX pZRX initialReserveFactor:1
    NewPToken BAT pBAT initialReserveFactor:1
    Support pZRX collateralFactor:0.5
    Support pBAT collateralFactor:0.5
    -- final
    ControllerImpl Deploy ScenarioG3 ControllerScen
    Unitroller SetPendingImpl ControllerScen
    ControllerImpl ControllerScen Become
    Distributor Deploy
    DistributorProxy Deploy (Distributor Address) (RegistryProxy Address) (Unitroller Address)
    DistributorProxy SetPieRate 1e18
    Controller SetDistributor (DistributorProxy Address)
    DistributorProxy SetPieSpeed pZRX 1
    DistributorProxy SetPieSpeed pBAT 1
    Erc20 Deploy Standard PIE "PIE Token" 18
    Give (Address DistributorProxy) pieInitAmount PIE
    Assert Equal (Erc20 PIE TokenBalance (Address DistributorProxy)) pieInitAmount

Macro GrantsController
    FlywheelController
    -- current
    ControllerImpl Deploy ScenarioG4 ControllerScen
    Unitroller SetPendingImpl ControllerScen
    ControllerImpl ControllerScen Become

Macro InitSpeeds
    Prep Geoff 100e18 ZRX pZRX
    Mint Geoff 50e18 pZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn Some BAT pBAT
    Mint Coburn 6e18 pBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn pBAT
    Borrow Coburn 1e18 pZRX
    DistributorProxy SetPieSpeed pZRX 1
    DistributorProxy SetPieSpeed pBAT 1
    DistributorProxy RefreshPieSpeeds
    DistributorProxy SetPieAddress (Address PIE)
    Assert Equal (DistributorProxy PieAddress) (Address PIE)

Test "PIE speed can be set per market"
    GrantsController
    InitSpeeds
    -- Baseline pie amounts
    Assert Equal (DistributorProxy PieAccrued Geoff) 0
    Assert Equal (Erc20 PIE TokenBalance Geoff) 0
    -- Pie speed can be set
    DistributorProxy SetPieSpeed pZRX 2
    FastForward 1000 Blocks
    DistributorProxy ClaimPie Geoff
    Assert Equal (DistributorProxy PieAccrued Geoff) 0
    Assert Equal (Erc20 PIE TokenBalance Geoff) 2000
    -- Pie speed can be changed
    DistributorProxy SetPieSpeed pZRX 4
    FastForward 1000 Blocks
    DistributorProxy ClaimPie Geoff
    Assert Equal (DistributorProxy PieAccrued Geoff) 0
    Assert Equal (Erc20 PIE TokenBalance Geoff) 6000
    -- Pie speed can be removed
    DistributorProxy SetPieSpeed pZRX 0
    FastForward 1000 Blocks
    DistributorProxy ClaimPie Geoff
    Assert Equal (DistributorProxy PieAccrued Geoff) 0
    Assert Equal (Erc20 PIE TokenBalance Geoff) 6000

Test "Set pie rate is removed"
    GrantsController
    InitSpeeds
    AllowFailures
    DistributorProxy SetPieRate 5

Test "Pie is not claimed automatically"
    GrantsController
    InitSpeeds
    DistributorProxy SetPieSpeed pZRX 2
    FastForward 100000 Blocks
    -- Check pie is not claimed automatically
    Mint Geoff 50e18 pZRX
    Assert Equal (Erc20 PIE TokenBalance Geoff) 0
    -- Confirm there was pie to claim
    DistributorProxy ClaimPie Geoff
    Assert Equal (Erc20 PIE TokenBalance Geoff) 200000
