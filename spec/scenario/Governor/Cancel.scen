Macro DeployGov
    SetBlockNumber 1
    Counter Deploy CNT1
    Timelock Deploy Scenario Jared 604800
    Pie Deploy Bank
    NewController
    ListedPPIEToken pPIE Pie
    Governor Deploy Governor LegitGov (Address Timelock) (Address RegistryProxy) Guardian 19710
    VotingEscrow Deploy VE (Address RegistryProxy) (Pie Address) (Address LegitGov)
    From Guardian (Governor LegitGov SetVotingEscrow (VotingEscrow Address VE))
    From Bank (Pie Approve VotingEscrow 7000000e18)
    From Bank (VotingEscrow CreateLock 7000000e18 125798400)
    Timelock SetAdmin (Address LegitGov)
    Enfranchise Root 7000000e18
    Enfranchise Jared 7000000e18
    Assert Equal (RegistryProxy pPIE) (Address pPIE)

Macro Enfranchise user amount
    From Bank (Pie Transfer user amount)
    From user (Pie Approve VotingEscrow amount)
    From user (VotingEscrow CreateLock amount 125798400)

Macro GivenPendingProposal
    DeployGov
    MineBlock
    MineBlock
    Governor LegitGov Propose "Add and sub" [(Address CNT1) (Address CNT1)] [0 0] ["increment(uint256,uint256)" "decrement(uint256)"] [["7" "4"] ["2"]]
    Assert Equal ("Pending") (Governor LegitGov Proposal LastProposal State)

Macro GivenActiveProposal
    GivenPendingProposal
    MineBlock
    MineBlock
    Assert Equal ("Active") (Governor LegitGov Proposal LastProposal State)

Macro GivenSucceededProposal
    GivenActiveProposal
    Governor LegitGov Proposal LastProposal Vote For
    From Jared (Governor LegitGov Proposal LastProposal Vote For)
    AdvanceBlocks 20000
    Assert Equal ("Succeeded") (Governor LegitGov Proposal LastProposal State)

Macro GivenQueuedProposal
    GivenSucceededProposal
    FreezeTime 100
    Governor LegitGov Proposal LastProposal Queue
    Assert Log ProposalQueued (id 1)
    Assert Equal ("Queued") (Governor LegitGov Proposal LastProposal State)

Macro GivenExecutedProposal
    GivenQueuedProposal
    FreezeTime 604901
    Governor LegitGov Proposal LastProposal Execute
    Assert Equal ("Executed") (Governor LegitGov Proposal LastProposal State)

Test "Cancel a Pending proposal"
    GivenPendingProposal
    From Root (VotingEscrow Delegate Geoff)
    Assert Equal ("Pending") (Governor LegitGov Proposal LastProposal State)
    --sending away delegates takes a block, so proposal will be "Active" by time it is cancelable
    Governor LegitGov Proposal LastProposal Cancel
    Assert Log ProposalCanceled (id 1)
    Assert Equal ("Canceled") (Governor LegitGov Proposal LastProposal State)

Test "Cancel an Active proposal"
    GivenActiveProposal
    From Root (VotingEscrow Delegate Geoff)
    Governor LegitGov Proposal LastProposal Cancel
    Assert Log ProposalCanceled (id 1)
    Assert Equal ("Canceled") (Governor LegitGov Proposal LastProposal State)

Test "Cancel a Succeded proposal"
    GivenSucceededProposal
    From Root (VotingEscrow Delegate Geoff)
    Governor LegitGov Proposal LastProposal Cancel
    Assert Log ProposalCanceled (id 1)
    Assert Equal ("Canceled") (Governor LegitGov Proposal LastProposal State)

Test "Cancel a queued proposal"
    GivenQueuedProposal
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Address CNT1) 0 (Governor LegitGov Proposal LastProposal Eta) "increment(uint256,uint256)" 7 4))
    Assert True (Timelock QueuedTransaction (Timelock TxHash (Address CNT1) 0 (Governor LegitGov Proposal LastProposal Eta) "decrement(uint256)" 2))
    From Root (VotingEscrow Delegate Geoff)
    Governor LegitGov Proposal LastProposal Cancel
    Assert Log ProposalCanceled (id 1)
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Address CNT1) 0 (Governor LegitGov Proposal LastProposal Eta) "increment(uint256,uint256)" 7 4))
    Assert False (Timelock QueuedTransaction (Timelock TxHash (Address CNT1) 0 (Governor LegitGov Proposal LastProposal Eta) "decrement(uint256)" 2))
    Assert Equal ("Canceled") (Governor LegitGov Proposal LastProposal State)

Test "Revert when trying to cancel an executed proposal"
    GivenExecutedProposal
    From Root (VotingEscrow Delegate Geoff)
    AllowFailures
    Governor LegitGov Proposal LastProposal Cancel
    Assert Revert "revert Governor::cancel: cannot cancel executed proposal"

Test "Revert when canceling if proposer has votes"
    GivenPendingProposal
    AllowFailures
    Governor LegitGov Proposal LastProposal Cancel
    Assert Revert "revert Governor::cancel: proposer above threshold"

Test "Guardian can cancel any proposal"
    GivenActiveProposal
    From Guardian (Governor LegitGov Proposal LastProposal Cancel)
    Assert Log ProposalCanceled (id 1)
    Assert Equal (Governor LegitGov Proposal LastProposal State) "Canceled"
