Test "Add all reserves and verify effects"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) (Exactly 500e8) -- 50e18 / 1e9
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX pZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance pZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 pZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (PToken pZRX Reserves) (Exactly 1e18)
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out add some our reserves (1e18)
    Erc20 ZRX Faucet Root 3e18
    From Root (Erc20 ZRX Approve pZRX 6e18)
    AddReserves 1e18 pZRX
    Assert Equal (Erc20 ZRX TokenBalance pZRX) (Exactly 56e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 2e18)
    Assert Equal (Erc20 pZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (PToken pZRX Reserves) (Exactly 2e18)
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    -- unchanged
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1.08e9)

Test "Remove and re add reserves and remove again"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX pZRX
    Mint Geoff 50e18 pZRX
    Assert Equal (Erc20 pZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX pZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance pZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 pZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (PToken pZRX Reserves) (Exactly 1e18)
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out half of reserves (0.5e18)
    ReduceReserves 0.5e18 pZRX
    Assert Equal (Erc20 ZRX TokenBalance pZRX) (Exactly 54.5e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0.5e18)
    Assert Equal (Erc20 pZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (PToken pZRX Reserves) (Exactly 0.5e18)
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.5e18+0.5e18-0.0e18)/500.0e8
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's put back reserves (1e18)
    From Root (Erc20 ZRX Approve pZRX 6e18)
    AddReserves 0.5e18 pZRX
    Assert Equal (Erc20 ZRX TokenBalance pZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 pZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (PToken pZRX Reserves) (Exactly 1e18)
    Assert Equal (PToken pZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.5e18+0.5e18-0.0e18)/500.0e8
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1.08e9)

Test "add reserves to empty contract"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1e9)
    Erc20 ZRX Faucet Root 3e18
    From Root (Erc20 ZRX Approve pZRX 6e18)
    AddReserves 2e18 pZRX
    Assert Equal (Erc20 ZRX TokenBalance pZRX) (Exactly 2e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 1e18)
    Assert Equal (PToken pZRX Reserves) (Exactly 2e18)
    -- unchanged
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1e9)

Test "add reserves failures"
    NewController
    ListedPToken ZRX pZRX initialExchangeRate:1e9
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1e9)
    Assert Equal (PToken pZRX Reserves) (Exactly 0e18)
    Erc20 ZRX Faucet Root 2e18
    AllowFailures
    AddReserves 2e18 pZRX
    Assert Revert "revert Insufficient allowance"
    Assert Equal (Erc20 ZRX TokenBalance pZRX) (Exactly 0e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 2e18)
    Assert Equal (PToken pZRX Reserves) (Exactly 0e18)
    -- unchanged
    Assert Equal (PToken pZRX ExchangeRate) (Exactly 1e9)

Test "Add reserves WBTC when paused"
    NewController
    ListedPToken WBTC pWBTC initialExchangeRate:1e9 tokenType:WBTC
    Prep Geoff 50e18 WBTC pWBTC
    Mint Geoff 50e18 pWBTC
    Assert Equal (Erc20 pWBTC TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (PToken pWBTC UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (PToken pWBTC ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC pWBTC 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Erc20 WBTC Faucet Root 3e18
    Invariant Remains (Erc20 WBTC TokenBalance pWBTC) (Exactly 55e18)
    Invariant Remains (Erc20 WBTC TokenBalance Root) (Exactly 3e18)
    Invariant Remains (Erc20 pWBTC TokenBalance Geoff) (Exactly 500e8)
    Invariant Remains (PToken pWBTC Reserves) (Exactly 1e18)
    Invariant Remains (PToken pWBTC UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Invariant Remains (PToken pWBTC ExchangeRate) (Exactly 1.08e9)
    From Root (Erc20 WBTC Approve pWBTC 6e18)
    Erc20 WBTC Pause
    AllowFailures
    AddReserves 1e18 pWBTC
    Assert Revert
